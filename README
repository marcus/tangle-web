Probably should move to a document database.

A mysql links join table would have to always search for either guid:
relationship: parent
node_a: 1
node_b: 2

is the same as
relationship: child
node_a: 2
node_b: 1

select from links where node_a = guid OR node_b = guid
then filter by position -
nodes in a would get the listed relationship
nodes in b would get the inverse (siblings would be the same)

-----

In a document db it'd just be
node_a:
children: [b]

node_b:
parents: [a]

-----

Deleting

A creates IX at 10:00

A => B Sync at 10:05
A and B have IX

at 10:10 B deletes IX
A => B Sync at 10:10

DESIGN PRINCIPLES
Partial syncs should be no problem
Syncs should not rely on a system of record
Realtime / collaborative updating should be built in
Should support partial sync (client only needs a subset of the data)


Gathering:
On A:
- Everything with no sync date
- Everything (with "modified_at" or "deleted_at" after "last_sync with client B") (either on the record itself or global)

On B:
- Everything with no sync date
- Everything (with "modified_at" or "deleted_at" after "last_sync with client A")
